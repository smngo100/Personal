3 Technologies for creating websites 
1. HTML: Creates content for the website; buttons, text, images
2. CSS (Cascading Style Sheets): Changes the appearance of the website
3. JavaScript: Makes the website interactive 

Order of Operations 
1. (...)
2. * / 
3. + 0 
4. Comparison operators
5. Logical operators 

Strategy for JavaScript 
1. Think abotu what steps we need (algorithm)
2. Convert those steps into code


-------------------- JavaScript Basics --------------------
What is JavaScript? 
- Giving instructions to a computer
- Computer follows our instructions 

// Some Code 
alert('message'); // Creates a pop up message 
document.body.innerHTML = 'hello'; // Replaces all content on page with this message

Basics of JavaScript 
- Code: Giving instructions to a computer
- Running the code: The computer follows our instructions 

Syntax: Rules that we have to follow when using a programming language 

In programming: 
2, 3, 4 = integers 
2.2, 2.5 = floating point numbers (floats) 
Computers have a problem working with floats


-------------------- Numbers and Math --------------------
// Float Calculations
Calcuations with floats are sometimes inaccurate.
So to avoid inaccuracies when working with money:
1. Do the calculation in cents 
2. Convert back to dollars 
Ex) $20.95 + $7.99 --> (2095 + 799) / 100 
Both expressions give the same result

Math.round()


-------------------- Strings --------------------
string = text
concatentation = when we combine strings together
type coercion (automatic type conversion)

// Numbers and strings are different types of values 


3 Ways to Create string 
1. '...'
2. "..."
3. `...`  = template string 
  * special feature: interpolation = insert value directly into a string
    $ {} = insert value directly into string
    Ex)  `Items (${1 + 1}): $${}`

Character: 
1. letter (a, b, c)
2. number (1, 2, 3)
3. symbol (!, @, #)
4. escape character \', \", \n


-------------------- HTML CSS Review, console.log  --------------------
Web page = a single page (on a website) 
(home page, cart page, etc.)

CSS review
CSS selector: Selects which elements to change
CSS Styles: How to change the appearance
 left side = CSS property: what we're changing
 right side = CSS value: what we're chnaging the property to

HTML attributes: change the behavior of an element 
<element_name attribute_name="attribute_value"> </element_name>
attribute_name: what we're changing about this element
attribute_value: what we're changing this attribute to 

to display js code
<script></script>
- OR - 
in an element onclick=""


-------------------- Variables --------------------
variable = a container 
let keyword creates a new variable 
Ex) let x = 5; // This is called assigning a value to a variable
               // When we reassign it's called re-assigning a value to a variable
                  // When re-assigning no need to put let 
                  Ex) x = 2;

Variable name restrictions: 
1. Can't use special words 
   Ex) let let = 5; NOT ALLOWED
2. Cant't start with a number 
   Ex) let 5bread = 2; NOT ALLOWED
       let br5ead = 2; ALLOWED
       let bread5 = 2; ALLOWED
3. Can't use special characters except: $, _

----- Naming Conventions -----
camelCase       cartQuantity
PascalCase      CartQuantity
kebab-case      cart-quantity (doesn't work in JS but works in HTML & CSS)
snake_case      cart_quantity (not used in JS)

3 ways to create variables
1. let x = 5;      let = use when we want to change variable later on (aka re-assign)
2. const x = 5;    const = can't change it later
3. var x = 5;      var = variable (not used in new JS code)

// Recommended to use const 


-------------------- Booleans --------------------
- Booleans are another type of value 
- There are only 2 boolean values: true, false
- Purpose: represents whether something is true or false

Syntax rules for Boolean: 
just type 
true 
or 
false

== vs ===
== converts both values into the same type 
  ex) console.log()5 == '5.00; 
      output: true
=== converts
use === 
use !==, not !=

logical && operator 
- checks if the left side is true and the right side if also true 

Falsy Values 
false
0 
'' 
NaN (Not a Number)
undefined 
null 
- Any value not on this list is truthy 

----- Ternary operator -----
condition ? expressionIfTrue : expressionIfFalse;

AND Operator &&
false && value2
// Called a short circuit evaluation
- Stops early 
- Doesn't need to run the code on the right 


---------- Shortcuts for If-Statements ----------
- Ternary Operator ? :
- Guard Operator && 
- Default Operator ||

-------------------- Functions --------------------
What is a function? A function lets us reuse code
function keyword creates a new function then we choose function name
ex) function function_name() {}
to call a function: function_name();

Rules for function names: 
1. Can't use special words 
2. Can't start with a number 
3. Can't use special characters except: $, _
Best practice = use camelCase


When we use a return statement, it ends the function immediately  
Return statement: lets us get a value out of the function 
Return = gets a value out of a function
Parameter = puts a value into a function

Rules for Parameter Names 
1. Can't use special words
2. Can't start with a number 
3. Can't use special characters except $, _
Best practice = use camelCase

* When a function has a parameter, we say "this function takes a parameter", or "this function takes a number"
* When we pass a value into the function, we say "passing a value into the function" (name for this value is called the argument)


-------------------- Objects --------------------
What is an object? 
- An object groups multiple values together
- objects are values

const prudct = {
 name: 'socks',
 price: 1090
};
left is property - used to acccess specific values inside the object
right is value

Why we use objects
- make our code more organized

Objects 
- let us **group** multiple values together
- let us **use** multiple values together 

Bracket Notation 
- lets us use properties that don't work with dot notation 
product['name];

Which one should we use? 
- use dot notation by default 
- for properties that don't work, use bracket notation

Function inside object = method



2 More Built-in Objects
- JSON 
- localStorage


---------- JSON ----------
- JavaScript Object Notation
- a syntax
- similar to JavaScript object

We use JSON 
- when we send data between computers
- when we store data 

Convert: 
JavaScript Object --> JSON strings
console.log(JSON.stringify(product));

JSON string --> JavaScript Object
JSON.parse()
console.log(JSON.parse(jsonString));

null vs undefined 
null = intentionally want something to be empty


---------- localStorage ----------
- save values more permanently


---------- Object Notes ----------
- objects are references 
- can't compare objects directly
- When you compare two variables that are objects, you're comparing the references, not the values inside
- copy by reference


---------- Destructing ----------
- easier way to take properties out of an object 
ex) 
const object4 = {
 message: 'Good job!',
 price: 799
}

const { message, price } = object4;
console.log(message, price);



-------------------- DOM --------------------
DOM (document object model) = another built-in object 
- The document object represents / models the webpage
- Document object is linked to the webpage
- We can have HTML elements inside JS 
- The DOM combines JS and HTML together
- When a HTML element is inside JS, the HTML element is converted into a JS object
- innerHTML gives us control of all HTML inside the body

document.querySelector() 
- lets us get any elements from the page and put it inside JS 

- Every HTML element has a property .innerHTML
- HTML elements are JS objects

Summary 
- DOM combines JS and HTML together
- It gives JS full control of the webpage

- Whenever we get a value from the DOM, the value will be a string

clicks, keydowns => events 
onclick, onkeydown => event listeners

- Every event listener gets an event object

document object represents the webpage 
the window object represents the browser

.classList = gives us control of the class attribute


-------------------- Arrays --------------------
- another type of value 
- represents a list of values
- Array = list of values
- To get a specific value in an array => []
- Index = position in the array
  - 0-indexed array
- Inside an array we can put any type of value
- Array has properties and methods

Way to find out if something is an Array 
Array.isArray(); then console log it --> console.log(Array.isArray([1, 2));
