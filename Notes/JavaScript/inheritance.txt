inheritance = lets us reuse code between classes 

- inheritance: allows one class to get all the properties and methods from another class, so we don't have to duplicate code 

ex) Take a look at the Amazon webpage. Notice that there are different types of products. We have appliances and clothing. 
They are different types of products from each other but they are still products.

Let's say we have two classes: 

class Product {}     // Parent class

class Clothing {}    // Child class

class Appliances {}  // Child class

If we have some properties that are only in clothing, or properties that are only in appliances we'll need separate classes. 
And since they're also products they'll need the properties and methods from the Product class, but how can we do this without duplicating all 
the Product class code into the other classes?

That's where inheritance comes in. 

class Clothing extends Product {}
- This means clothing will get all the properties and methods of the Product class
- (or) it will inherit all the properties and methods of the Product class 


Use inheritance when one class is a more specific type of another class
- Here Clothing is a more specific type of Product

Use super(); to call the constructor of the parent class

Discriminator property = tells us which class we shuold convert the object to 


If parent class and child class have the same method, but child class has something different, the child class method will **override / replace the parent's method (aka method overriding). IF you want to call the method in the parent class, then in the child class function above that code write super.methodName();

Polymorphism = use a method without knowing the class
- The class will determine what this method does 


--------------------------------------- SUMMARY ---------------------------------------

inheritance = lets us reuse code between classes 
method overriding, polymorphism 

