# ---------------------------------------- For Loops ----------------------------------------
READING A LOOP STATEMENT 
Example:
for i in range(0, n)
Read as: The loop variable i takes on each value in the sequence range(0, n).

Example (LIST): 
for entry in phonebook
Read as: The loop variable entry takes on each VALUE in the iterable phonebook list.
* NOTE: Here I am talking about a LIST not a DICTIONARY. For a dictionary, the statement would be read differently.

Example (DICTIONARY):
phonebook = {"a":b, "c":d, "e":f)
for entry in phonebook
Read as: The loop variable entry takes on each KEY in the iterable phonebook dictionary.

Example: 
for item in collection
Read as: For each item in the collection, do something.

Example: 
numbers = [1, 2, 3, 4, 5]
for number in numbers:  
  print(number)
Read as: For each number in the list numbers, print the number.

Dictionary Example: 
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'rust',
    'phil': 'python',
}

for name, language in favorite_languages.items():
    print(f"\nName: {name.title()}")
    print(f"Language: {language.title()}")
Interpreted as: The key is assigned to the variable name, and the value is assigned to the variable language.


---------- Python Crash course by Eric Matthes ----------
------------- Chapter 4: Working with Lists -------------

magicians = ['alice', 'david', 'carolina']
for magician in magicians: 
  print(magician)
* Tells Python to pull a name from the list magicians, and store it in the variable magician.
Read as: For every magician in the list of magicians, print the magician's name.

A CLOSER LOOK AT LOOPING
* Set of steps is repeated once for each item in the list, no matter how many items are in the list.

DOING MORE WORK WITHIN A FOR LOOP
* Inside the for loop, each indented line is executed once for each value in the list.

DOING SOMETHING AFTER A FOR LOOP
* After a for loop, the user tends to display a message after all of the individual messages have been printed.

