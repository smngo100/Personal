HTML elements: <button>, <p>
Element is a generic term that we use to describe anything that we can display on the webpage

Syntax: Rules for writing code, grammar (for code)
<>/ 


HTML Tag: Tells the computer what we're trying to create (e.g. <button>)
* Every element consists of two tags. an opening tag and a closing tag 
* closing tag has a </tag_name> '/' in front of the tag name

<a> = anchor element, link to another website

HTML attribute: modifies how an element behaves 


CSS - used to style our webpage, change the appearnance of our HTML elements

General Technique: 
1. Create element with HTML
2. Style with CSS one-by-one

.<class_name> the . targets the class



pseudo styles: add extra styles in certain situations

box-shadow creates a shadow behind the button
box-shadow: 0 0 0 0 
takes 4 values 
1) horizontal positional of the shadow
2) vertical position of the shadow
3) blur  
4) color 


Margin: spacing on the outside of the element
Padding: spacing on the inside of the element

CSS Box Model: how much space an element takes up, and how far awway it is from other elements

padding is a better alternative to height x width because it adjusts to the contents if we ever need to modify it
Box model determines how much space an element takes up on the page


The selector that's more specifi has higher priority
class name selecotr has more priorirty than the element name selector 


Text Element
* Text element: An element that is inside a line of text
* They exists inside a line of txt and modify that part of the text. not modifying the whole tihng 

<span></span> most generic text elemenets, has no style, can give it a class and can style it ourselves and give it any style we want. lets us modify a specific part of the text without modifying the whole thing. most flexible. can style it however we want.

<!DOCTYPE html> 
* tells browser to use modern version of HTML it'll fall back to an older version that has less features

nesting: can have elments inside elements

<html> = web page
<body></body> = contains all elements that are visible


<link> is a special elemnet, it doesn't require a CLOSING TAG 
* called a void element
* void elemnets don't need a closing tag


BASIC STRUCTURE FOR ALL HTML FILES 
<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
</html>


FOR IMAGES 
* When we set the width, the height will also adjust so that he image will have the same dimensions (keeps the same shape)

WHAT WE GET FROM THIS STRUCTURE 
1. <title>
2. Live Server 
3. Link CSS files 
4. Add new fonts and more



Search box 
<body>
  <input class="" type="text" placeholder="text you want to put">
</body>

Linking an image
<body>
  <img class="" src="where to find the image">
</body>



CSS has three types of elements
1) Block = takes up the entire line. so paragraph by default is a block element
  * regardless of how much space they actually take up, they take up the entire line. they're forced to be on their own line.
2) Inline-block elements = only takes up as much space as needed 
  * doesn't take up the entire line
  * ex) input element and input element 
3) inline element = appear within a line of text 
  * text elements

block => inline-block
You can apply properies to multiple classes at once by separating them with a comma: 
.video-author, .video-stats {display:inline-block}

inline-block => block 
display: block;


DISPLAY PROPERTY
* Control how an element is displayed


DIV ELEMENT 
<div> = division 
* essentially just a box 
* <div> is a block element, so takes up the entire line 
* <div> can contain other elements 
* <div> = container 
* container that groups other elements together to ceate complex layouts 


BLOCK ELEMENTS... take up the entire line in their container 


NESTED LAYOUTS TECHNIQUE 
1. Vertical Layout
-----
-----
-----


2. Horizontal Layout
|||||
|||||
|||||



3 ways to write CSS 
1. style element
2. put css in separate file
3. inline styles - writing css inside a line of <html></html>


fr is a special value in grid that stands for freespace
* to take up the remaining space on the grid
* number that goes in front of fr (e.g. 1fr, 2fr) is the ratio


Flexbox 
* Flexbox is similar to CSS grid, it can create the same kind of layouts BUT it's more flexible
* Inside flexbox, the divs (which are block elemenets) don't behave like block elements anymore. They behave more like inline-block elements. They only take up as much horizontal space as they need to

Difference between Grid vs Flexbox 
* Grid = rigid layout 
* Flexbox = flexible layout 

Flexbox - focused on content size, used to spread out content evenly on horizontal 
when we focus on content size, use flexbox 
when we want to use grid, use grid 
horizontal layout - can use grid or flexbox 


fixed = placed in the browser window 
absolute = placed on the page 

General technqiue: 
1. Cretae element with html
2. Style with CSS one-by-one


flex-shrink: 0; means it won't shrink
width: 0; means it will shrink

When a position abosolute is inside a position fixed element, it's going to be placed relative to the position fixed element

When position absolute is inside position relative, position absolute will be positioned on the element, not on the page.

Causes display element to display normally, so can scroll with page, but we have something in the bottom right corner, so these are positioned relative. then to put something at the bottom right corner, put position absolute inside. 
